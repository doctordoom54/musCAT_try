classdef True_SC_Navigation < handle
    %TRUE_SC_NAVIGATION Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        time % [sec] : Current true time
        time_step % [sec] : Time step
        date
        prev_time % [sec] : Previous time when position/velocity was computed
        position % [km] : Current position of SC in inertial frame I
        velocity % [km/sec] : Current velocity of SC in inertial frame I
        position_relative_SB % [km] : Current position of SC relative to SB-center J2000 inertial frame
        velocity_relative_SB % [km/sec] : Current velocity of SC relative to SB-center J2000 inertial frame
        control_force % [N] : Control force vector generated by thrusters (e.g. MT, CT) that passes through Center of Mass of SC
        disturbance_force % [N] : Disturbance force vector generated by SRP that passes through Center of Mass of SC
        flag_use_precomputed_spice_trajectory % [Boolean] : 1 = Use SPICE trajectory, Else compute ODE dynamics
        spice_filename % [string] : SC’s SPICE FileName
        spice_name % [string] : SC’s SPICE Name
        ode_options % : Options for Matlab%s ODE function odeset( RelTol’,1e-14,’AbsTol’,1e-14)
        intercept_distance
        ratio_orbit_radius_SB_radius
    end
    
    methods
        function obj = True_SC_Navigation(mission_true_time,sc_body_init_data)
            %TRUE_SC_NAVIGATION Construct an instance of this class
            %   Detailed explanation goes here
            obj.time = mission_true_time.time;
            obj.time_step = mission_true_time.time_step_dynamics;
            obj.date = mission_true_time.date;
            
            obj.position = sc_body_init_data.position; % [km]
            obj.velocity = sc_body_init_data.velocity; % [km/sec]
            obj.position_relative_SB = sc_body_init_data.position_relative_SB; % [km]
            obj.velocity_relative_SB = sc_body_init_data.velocity_relative_SB; % [km/sec]
            obj.prev_time = obj.time;
            
            obj.intercept_distance = 0;
            
            obj.control_force = [0 0 0]'; % [N]
            obj.disturbance_force = [0 0 0]'; % [N]
            obj.flag_use_precomputed_spice_trajectory = sc_body_init_data.flag_use_precomputed_spice_trajectory;
            obj.spice_filename = sc_body_init_data.spice_filename;
            obj.spice_name = sc_body_init_data.spice_name;
            obj.ode_options = odeset('RelTol',1e-14,'AbsTol',1e-14);
            
            if obj.flag_use_precomputed_spice_trajectory == 1
                % Use SPICE trajectory
                cspice_furnsh(obj.spice_filename)
            end
            
            if isfield(sc_body_init_data,'ratio_orbit_radius_SB_radius')
                obj.ratio_orbit_radius_SB_radius = sc_body_init_data.ratio_orbit_radius_SB_radius;
            end
        end
        
        function obj = func_true_position_velocity_dynamics(obj,mission_init_data,mission_true_time,mission_true_small_body,mission_true_solar_system,true_SC_body)
            
            obj.time = mission_true_time.time;
            obj.date = mission_true_time.date;
            
            if obj.flag_use_precomputed_spice_trajectory == 1
                % Use SPICE trajectory
                
                % Sun centered - J2000 frame (inertial)
                SC_pos_vel_t0 = cspice_spkezr(obj.spice_name,mission_true_time.date,'J2000','NONE','SUN');
                obj.position = SC_pos_vel_t0(1:3); % [km]
                obj.velocity = SC_pos_vel_t0(4:6); % [km/sec]
                
                % SB centered - J2000 frame (inertial)
                SC_pos_vel_t0_SBcentered = cspice_spkezr(obj.spice_name,mission_true_time.date,'J2000','NONE',mission_true_small_body.spice_name);
                obj.position_relative_SB = SC_pos_vel_t0_SBcentered(1:3); % [km]
                obj.velocity_relative_SB = SC_pos_vel_t0_SBcentered(4:6); % [km/sec]
                
            else
                % Compute Trajectory
                
                obj.time_step = (obj.time - obj.prev_time); % [sec]
                this_time_array = [obj.prev_time : obj.time_step/10 : obj.time];
                
                SC_SB_distance = norm(obj.position_relative_SB); % [km]
                SB_SUN_distance = norm(mission_true_small_body.position_SB - mission_true_solar_system.position_Sun); % [km]
                
                % Compute Sphere of Influence
                R_SOI = (mission_true_small_body.mu_SB / mission_true_solar_system.mu_Sun)^(2/5) * SB_SUN_distance; % [km]
                
                if SC_SB_distance > R_SOI
                    % Sun centered - J2000 frame (inertial)
                    
                    SC_pos_vel_current = [obj.position; obj.velocity]; % [km, km/sec]
                    
                    [T,X]=ode113(@(t,X) func_orbit_inertial_static_SB_faraway(t,X, mission_true_small_body.mu_SB, mission_true_solar_system.mu_Sun, mission_true_small_body.position_SB, mission_true_solar_system.position_Sun, obj.control_force, obj.disturbance_force, true_SC_body.mass.total_mass), this_time_array, SC_pos_vel_current, obj.ode_options);
                    
                    new_SC_pos_vel_current = X(end,:)';
                    
                    obj.position = new_SC_pos_vel_current(1:3); % [km]
                    obj.velocity = new_SC_pos_vel_current(4:6); % [km/sec]
                    
                    obj.position_relative_SB = obj.position - mission_true_small_body.position_SB; % [km]
                    obj.velocity_relative_SB = obj.velocity - mission_true_small_body.velocity_SB; % [km/sec]
                else
                    % SB centered - J2000 frame (inertial)
                    
                    SC_pos_vel_current_SBcentered = [obj.position_relative_SB; obj.velocity_relative_SB]; % [km, km/sec]
                    
                    [T,X]=ode113(@(t,X) func_orbit_inertial_static_SB_centered(t,X, obj.control_force, obj.disturbance_force, true_SC_body.mass.total_mass, mission_true_small_body), this_time_array, SC_pos_vel_current_SBcentered, obj.ode_options);
                    
                    new_SC_pos_vel_current_SBcentered = X(end,:)';
                    
                    obj.position_relative_SB = new_SC_pos_vel_current_SBcentered(1:3); % [km]
                    obj.velocity_relative_SB = new_SC_pos_vel_current_SBcentered(4:6); % [km/sec]
                    
                    obj.position = obj.position_relative_SB + mission_true_small_body.position_SB; % [km]
                    obj.velocity = obj.velocity_relative_SB + mission_true_small_body.velocity_SB; % [km/sec]
                end
                
            end
            
            obj.prev_time = obj.time;
        end
        
        function obj = func_true_SB_intercept_distance(obj,mission_true_small_body,mission_true_solar_system,SC_control_orbit)
            
            % Estimate SB orbit
            
            this_SB_pos_vel_current = [mission_true_small_body.position_SB; mission_true_small_body.velocity_SB]; % [km, km/sec]
            
            this_time_array = [obj.time : 10 : SC_control_orbit.time_intercept]; % [sec]
            
            Sun_pos_t0_tf = cspice_spkezr('10',obj.date+this_time_array,'J2000','NONE','10');
            
            [T,X]=ode113(@(t,X) func_orbit_SB_body(t,X, mission_true_solar_system.mu_Sun, Sun_pos_t0_tf, this_time_array),this_time_array,this_SB_pos_vel_current,obj.ode_options);
            
            SB_pos_t0_tf = X';
            
            % Estimated SC orbit
            
            this_SC_pos_vel_current = [obj.position; obj.velocity]; % [km, km/sec]
            
            %             [T,X]=ode113(@(t,X) func_orbit_3rd_body(t,X, obj.mu_SB, obj.mu_Sun, SB_pos_t0_tf, Sun_pos_t0_tf, this_time_array),this_time_array,this_SC_pos_vel_current,obj.options);
            [T,X]=ode113(@(t,X) func_orbit_SB_body(t,X, mission_true_solar_system.mu_Sun, Sun_pos_t0_tf, this_time_array),this_time_array,this_SC_pos_vel_current,obj.ode_options);
            
            SC_pos_t0_tf = X';
            
            obj.intercept_distance = norm(SC_pos_t0_tf(1:3,end) - SB_pos_t0_tf(1:3,end)); % [km]
            
        end
        
        function obj = func_compute_true_distance_desired_circular_trajectory(obj,SC_control_orbit)
            
            this_SB_pos_vel_current = [obj.position_relative_SB; obj.velocity_relative_SB]; % [km, km/sec]
            
            this_desired_SC_pos_vel_current_SBcentered = (interp1(SC_control_orbit.desired_time_array,SC_control_orbit.desired_SC_pos_vel_current_SBcentered,obj.time))';
            
            obj.intercept_distance = norm(this_SB_pos_vel_current(1:3) - this_desired_SC_pos_vel_current_SBcentered(1:3)); % [km]
        end
        
        function obj = func_update_control_force(obj,mission_true_SC)
            
            obj.control_force = zeros(3,1);
            
            % Chemical thruster
            if(mission_true_SC.true_SC_body.flag_hardware_exists.navigation_chemical_thruster == 1)
                
                for i=1:mission_true_SC.true_SC_chemical_thruster_actuator.num_chemical_thruster
                    
                    obj.control_force = obj.control_force + mission_true_SC.true_SC_chemical_thruster_actuator.chemical_thruster_data(i).control_force_CT;
                end
                
            end
            
        end
        
        
    end
end

