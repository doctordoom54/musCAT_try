classdef True_SC_Chemical_Thruster_Actuator < handle
    %CHEMICAL_THRUSTER_ACTUATOR Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        time
        
        num_chemical_thruster
        
        chemical_thruster_data
        %             – # name = ‘Chemical Thruster i’
        %             – health : Health of ith Chemical Thruster
        %                 0. Switched off
        %                 1. Switched on, works nominally
        %             – temperature [deg C] : Temperature of ith Chemical Thruster
        %             – # instantaneous_power_consumed [Watts] : Instantaneous power consumed by ith
        %                 Chemical Thruster (if it is switched on)
        %             – # instantaneous_data_generated [kb] : Data generated during the current time step, in kilo bits (kb)
        %             – # control_force_CT [N] : Control force vector generated by ith Chemical Thruster that passes through Center of Mass of SC
        %             – # control_torque_CT [Nm] : Control torque about Center of Mass of SC, generated by ith Chemical Thruster
        %             – thruster_warm_up_time [sec] : How much warm-up time is needed?
        %             – thruster_warm_up_power_consumed [Watts] : Power consumed during warmup time
        %             – # accumulated_warm_up_time = 0 [sec]
        %             – # command_actuation [Boolean] : 1 = Command actuation during this time step (after
        %                 actuator has warmed up)
        %             – command_actuation_power_consumed [Watts] : Power consumed during actuation
        %             – orientation [unit vector] : Normal vector of thrust in body frame B
        %             – location [m] : Location of actuator, in body frame B
        %             – maximum_thrust [N]
        %             – minimum_thrust [N] : This need not be 0
        %             – # commanded_thrust [N] : Comes from the SC’s software
        %             – thruster_noise [N] : Added to every dimension of commanded_thrust
        %             – # true_commanded_thrust [N] : Add thruster noise to commanded_thrust. This is the actual thrust of this thruster, which the SC software doesn’t know.
        %             – # command_executed [Boolean] : 1 = Command executed during this time step
        %             – # command_time [sec] : Time when latest Command was actuated
        
    end
    
    methods
        function obj = True_SC_Chemical_Thruster_Actuator(mission_true_time,sc_body_init_data)
            %CHEMICAL_THRUSTER_ACTUATOR Construct an instance of this class
            %   Detailed explanation goes here
            obj.time = mission_true_time.time;
            
            obj.num_chemical_thruster = sc_body_init_data.num_chemical_thruster;
            
            
            for i=1:obj.num_chemical_thruster
                
                tmp(i).health = 1; % [boolean] : 1=ok / 0=nok
                tmp(i).temperature = 20; % [deg C]
                tmp(i).instantaneous_power_consumption = sc_body_init_data.chemical_thruster_instantaneous_power_consumption(i); % [Watts]
                tmp(i).instantaneous_power_consumed = 0; % [Watts]
                tmp(i).instantaneous_data_volume = sc_body_init_data.chemical_thruster_instantaneous_data_volume;
                tmp(i).instantaneous_data_generated = 0; % [kb]
                tmp(i).control_force_CT = [0 0 0]'; % [N]
                tmp(i).control_torque_CT = [0 0 0]'; % [Nm]
                tmp(i).thruster_warm_up_time = sc_body_init_data.chemical_thruster_warmup_time; % [sec]
                tmp(i).thruster_warm_up_power_consumed = sc_body_init_data.chemical_thruster_warmup_power(i); % [Watts]
                tmp(i).accumulated_warm_up_time = 0; % [sec]
                tmp(i).command_actuation = 0; % [Boolean]
                tmp(i).command_actuation_power_consumed = 0; % [Watts]
                tmp(i).orientation = sc_body_init_data.chemical_thruster_direction_array(i,:)'; % [unit vector]
                tmp(i).location = sc_body_init_data.chemical_thruster_position_array(i,:)'; % [m]
                tmp(i).maximum_thrust = sc_body_init_data.chemical_thruster_maximum_thrust(i); % [N]
                tmp(i).minimum_thrust = sc_body_init_data.chemical_thruster_minimum_thrust(i); % [N]
                tmp(i).commanded_thrust = 0'; % [N]
                tmp(i).thruster_noise = sc_body_init_data.chemical_thruster_noise(i); % [N]
                tmp(i).true_commanded_thrust = 0';  % [N]
                tmp(i).commanded_torque = [0 0 0]'; % [Nm]
                tmp(i).thruster_noise = sc_body_init_data.chemical_thruster_noise;
                tmp(i).command_executed = 0;        % [Boolean]
                tmp(i).command_time = 0;            % [sec]
                tmp(i).ISP = sc_body_init_data.chemical_thruster_ISP(i);                       % [sec]
                tmp(i).mass_propelant_used = 0 ;    % [kg]

            end

            obj.chemical_thruster_data = tmp;
            
        end
        
        
        function obj = func_update_accumulated_warm_up_time(obj, true_time)
            % Update current time
            % Update accumulated time since last measurement
            
            obj.time = true_time.time;
            
            for i = 1:obj.num_chemical_thruster
                
                if obj.chemical_thruster_data(i).health == 1
                    obj.chemical_thruster_data(i).accumulated_warm_up_time = obj.time - obj.chemical_thruster_data(i).command_time;
                    obj.chemical_thruster_data(i).instantaneous_power_consumed = obj.chemical_thruster_data(i).thruster_warm_up_power_consumed;
                else
                    obj.chemical_thruster_data(i).accumulated_warm_up_time = 0;
                end
                
            end
            
        end
        
        function obj = func_check_warmup_time(obj)
            % check if a measurement must be taken or not accroding to
            % accumulated wait time
            
            for i=1:obj.num_chemical_thruster
                
                if obj.chemical_thruster_data(i).accumulated_warm_up_time >= obj.chemical_thruster_data(i).thruster_warm_up_time
                    obj.chemical_thruster_data(i).command_actuation = 1;
                else
                    obj.chemical_thruster_data(i).command_actuation = 0;
                end
                
            end
            
        end
        
        function obj = func_command_thurst(obj,SC_control_orbit,true_SC_adc,mission_true_time)
            
            for i = 1:obj.num_chemical_thruster
                
                obj.chemical_thruster_data(i).commanded_thrust = 0;
                obj.chemical_thruster_data(i).true_commanded_thrust = 0;
                
                if (SC_control_orbit.desired_control_thrust > 0) && (obj.chemical_thruster_data(i).command_actuation == 1)
                    disp('Chemical Thurster Firing!')
                    
                    obj.chemical_thruster_data(i).commanded_thrust = SC_control_orbit.desired_control_thrust/obj.num_chemical_thruster; % [N]
                    
                    if obj.chemical_thruster_data(i).commanded_thrust >= obj.chemical_thruster_data(i).maximum_thrust
                        obj.chemical_thruster_data(i).commanded_thrust = obj.chemical_thruster_data(i).maximum_thrust;
                    elseif obj.chemical_thruster_data(i).commanded_thrust <= 0
                        obj.chemical_thruster_data(i).commanded_thrust = 0;
                    elseif obj.chemical_thruster_data(i).commanded_thrust < obj.chemical_thruster_data(i).minimum_thrust
                        obj.chemical_thruster_data(i).commanded_thrust = obj.chemical_thruster_data(i).minimum_thrust;
                    else
                        % Do nothing!
                    end
                    
                    if obj.chemical_thruster_data(i).commanded_thrust > 0
                        obj.chemical_thruster_data(i).true_commanded_thrust = obj.chemical_thruster_data(i).commanded_thrust + obj.chemical_thruster_data(i).thruster_noise*randn(1); % [N]
                        obj.chemical_thruster_data(i).control_force_CT = obj.chemical_thruster_data(i).true_commanded_thrust*(true_SC_adc.rotation_matrix_SC*obj.chemical_thruster_data(i).orientation); % [N]
                        obj.chemical_thruster_data(i).instantaneous_power_consumed = obj.chemical_thruster_data(i).instantaneous_power_consumption;
                        obj.chemical_thruster_data(i).instantaneous_data_generated = obj.chemical_thruster_data(i).instantaneous_data_volume;
                        obj.chemical_thruster_data(i).mass_propelant_used = obj.chemical_thruster_data(i).mass_propelant_used + obj.chemical_thruster_data(i).true_commanded_thrust/(9.81*obj.chemical_thruster_data(i).ISP)*mission_true_time.time_step; % [kg]
                    else
                        obj.chemical_thruster_data(i).true_commanded_thrust = 0;
                        obj.chemical_thruster_data(i).control_force_CT = zeros(3,1);
                        obj.chemical_thruster_data(i).instantaneous_power_consumed = 0;
                        obj.chemical_thruster_data(i).instantaneous_data_generated = 0;
                    end
                end
            end
        end
        
        function obj = func_switch_off_thurst(obj,SC_executive)
            
            for i = 1:obj.num_chemical_thruster
                obj.chemical_thruster_data(i).commanded_thrust = 0;
                obj.chemical_thruster_data(i).true_commanded_thrust = 0;
                obj.chemical_thruster_data(i).control_force_CT = zeros(3,1);
                obj.chemical_thruster_data(i).command_actuation = 0;
            end
        end
        
    end
end

